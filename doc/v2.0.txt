v2.0

Bench and invites. 

Setup
-----
- Add gitignore
- Create a branch called bench


GridElement
-----------
- Role: 
  - manages the 8 boxes  
  - tracks which friend is currently associated with which one.
  - tracks which views are associated with each one.
  - tracks which videoPlayer is associate with each one.

- Instantiation:
  - Similar to friend

- Persistence:
  - State needs to be persisted ala friends.
  
- Data structure:
  - Persisted attributes: friend
  - Private instance variables videoPlayer, videoView, label
      
- Setup:
  - HomeViewController instantiates videoplayers and adds their ids in the GridElement
  - HomeViewController discovers all the views, frames, etc and adds their ids in the GridElement
  - HomeViewController assigns initial positions for friends. 

- Methods
  - Add, set friend, has friend.

- Implications for VideoPlayer
  - VideoPlayer is instantiated with grid element from which it gets everything it needs.

- Usage
  - Play a video
  - Record a video

TODO:
 x Create the GridElement as a persistent model
 x Setup the GridElements in homeviewcontroller on init.
 x Add the friends to the GridElements if they could no be retrieved.
 x Add the view ids to the GridElements
 x Add the videoPlayer Ids to the grid elements.
 x Move the relevant methods from friend to GridElementFactory


PROBLEM With Grid Element Architecture
--------------------------------------
It is a complete bitch to associate instance variables with managed objects that are not persisted.
I was planning on storing view, label, videoPlayer in the grid element

SOLUTION:
 x Create HomeViewController+Grid
 x Move GridManager methods there
 x Move grid methods from HomeViewController there
 x Fix initialization methods to use new architecture
   x Save array of videoPlayers in homeViewController+Grid
 x Change gridElement to get rid of extraneous properties.
 x Remove GridManager
 x Call rankingActionOccured
   x MoveToBench
   x playClick
   x recordStart


AddressBook
-----------
x create a new project to play with the address book.
x Print phone and type for all phones.
x contactsDirectory:
  x keyed by "first last"
  x points to array of phones {type: number:}
x fullNamesHavingPhone
  x arrayOfFullNames sorted by first that have any phone number

x Copy this contacts class into TBM
x Initialize it on a background thread so that contacts are retrieved in background.
x Use it to get the array of fullnames

Refinement and testing
x HomeViewController calls prefetchOnlyIfHasAccess
  x Check that it works in case of access and no access.
x Bench calls getFullNamesHavingAnyPhone
  x Does not open bench if it gets nil



BenchController HomeViewController+Bench
----------------------------------------
x Clicking a person on the bench moves him to grid.
- Clicking on a plus opens the bench.

InviteManager
-------------
- Role
  - Manages invites for person not currently a friend
  - Allows Tickle of friend where !hasApp
  
x Possible Scenarios 
  x No valid phone for contact selected.
  x Single valid phone for contact selected.
  x Multiple valid phones for contact selected
  x Phone matches existing friend.
  x get has app from server
    x Server not responding
    x Server responds with failure due to phone not valid
    x Server responds hasApp
    x Server responds !hasApp
    x Server stalled shows spinner
  x PreSms dialog
    x Cancel (terminate the invite)
    x Send
  x Sms dialog
    x cancel (terminate the invite)
    x send
  x getFriend
    x Server not responding
    x Server responds with failure due to phone not valid
    x Server responds with friend
    x Server stalled shows spinner    
  

Contact Search
--------------


Handling phone numbers.
----------------------
- Before a phone number is sent off the phone we should make sure it has country code and is in a good format. 
- Test pull all numbers from contact list and put them country code format. 


Registration with SMS loopback
------------------------------
x Reg screen
  x First
  x Last
  x Country Code 
  x Mobile Phone Number
- Verification
  - Strip of leading spaces and non word characters and make sure not blank.
  - Verify phone
- Send to server
    x If wrong 
      x send "status: error, title: Bad Number, msg: Enter a valid phone number"
    x If right
      x Send sms with code.
- Enter verification dialog


- Get friends
  - Validate params
    - If last name is blank

TODO:
- HomeViewController show proper reg screen
x Add handle error response in phone
x Add dialog for entering verification code

TEST:
x Bad firstname, lastname, phone
x code
  x expired
  x incorrect
  x null
  x correct
  
Friends coming in with
 - Last name null
 - HasApp null

PROBLEM: Page doesnt scroll and keyboard hides the submit button on iphone4.
SOLUTION: Add a scrollview
- Interface builder is absolute shit built it all in code.

TODO:
x Branch the code
x Add the code i created in FormUsingCode test project
x Remove the registration page from the storyboard.
x Hook up the RegistrationForm class
x Add next for each of the fields.
- merge code back.




CORNER CASES TO TEST:
--------------------
- Dont register pushToken for user until user has successfully registered this should be obvious as we need mkey to add a push user.
 