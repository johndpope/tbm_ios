 - Handle uploads of multiple videos simultaneously in the background.
 - Multiple uploads in a row for same friend.
   - Save the latest upload task for each friend with its status. 
   - A way to identify upload tasks.
   

- Architecture
  - Upload manager.
    - Saves upload task identifier of latest upload task for each friend.
    - Status of upload for each task. 
  - Handles task events
  - Schedules retries.
  - Produces the correct headers  
  
 - Upload for friend
   x Cancel any running upload task for that friend. Should probably do this so that we dont have an issue with overwriting the output file.
   x Change the description for that task to nil.
   x Move the file to the upload url for the friend.
   x Create a task.
      x Add the friendId to the description for the new task. 
   x Resume it. 

QUESTION 
  What state does task go to when cancelled? 
  
 - Test 
   
   - New video for same user before original has finished uploading.
   - Phone in airplane mode.


   Note: NSURLSession does not report server errors through the error parameter. The only errors your delegate receives through the error parameter are client-side errors, such as being unable to resolve the hostname or connect to the host. The error codes are described in URL Loading System Error Codes.
   Server-side errors are reported through the HTTP status code in the NSHTTPURLResponse object. For more information, read the documentation for the NSHTTPURLResponse and NSURLResponse classes.


   Important: The session object keeps a strong reference to the delegate until your app explicitly invalidates the session. If you do not invalidate the session, your app leaks memory.


 - If server does not receive a file it should respond with an error.
 
 
 uploadTasksStates.friendId ||= {}
 
 NSMutableDictionary *states = [uploadTasksStates objectForKey:friendId];
 if (!states){
     states = [[NSMutableDictionary alloc] init];
     [uploadTasksState setObject:states forKey:friendId];
 }
 
 