I made OBFileTransfer into a cocaopod so that it can be added to a project in a podfile and installed with pod isntall
and so we can collaborate on it.

Here is what I did.  I have marked what could have been done better or should probably be fixed with a !

Made FileTransferPlay a cocoapod
--------------------------------
- Forked Farhads FileTransferPlay under noplanb so that we can collaborate.
  ! Name should have been changed to OBFileTransfer rather than FileTransferPlay
- Added the minimum files required to make it a repo for a cocoapod
  - OBFileTransfer.podspec
  - LICENSE
  - README.md
- Changed the xcode groups for the OBFileTransfer heirarchy to regular folders. This was necessary so I could use 
  simple syntax to require the necessary files in the podspec. i.e. 'FileTransferPlay/FileTransferManager/**/*'
- Configured OBFileTransfer.podspec
  - Pulls all the files under 
    - FileTransferPlay/FileTransferManager/**/*
    - AWS/**/*
	QUESTION: is it correct that all the files under AWS are part of our pod?
- Does not pull the files for logger or the cocoapod files for reachability
- Made logger a different cocoa pod and added it as a dependency for FileTransferPlay
- Added Reachability as a dependency as well so that pod gets pulled in
- Added the 2 aws frameworks as dependencies so they automatically get pulled in as well.
! Since I did not make FileTransferPlay a cocoapod from scratch it does not conform to the normal heirarchy for cocoapods
  ! Cocoa pod structure should look like the following. Where Example holds the example project that will test / showoff your Pod and 
the actuall library code for your pod should reside in Pod/Classes and Pod/Assets. 
MyLib
  ├── .travis.yml
  ├── Example
  │   ├── MyLib
  │   ├── MyLib.xcodeproj
  │   ├── MyLib.xcworkspace
  │   ├── Podfile
  │   ├── Podfile.lock
  │   ├── Pods
  │   └── Tests
  ├── LICENSE
  ├── MyLib.podspec
  ├── Pod
  │   ├── Assets
  │   └── Classes
  └── README.md

 ! I did not change FileTransferPlay to the above structure. 
   - If we want to we might do the following: 
     - create a cocoa pod from scratch using 'pod lib create OBFileTransfer'
     - Add the project related code which uses the pod under Example/
	 - Add the library code for OBFileTransfer under Pod/Classes
   - That way you can do stuff like $ 'pod try OBFileTransfer' and it should run the example app.


Made OBLogger a cocoapod
------------------------
- I followed the correct pod structure a bit more closely for this.
- I pushed this under noplanb in github.
 

Created a repo for Private-Cocoapods
------------------------------------
- This is a repo for podspecs for our own private cocoapods. That way we can use modules that might not pass muster on the 
  cocoapod master repo.
- It is on github as noplanb/Private-Cocoapods
- I pushed the podspecs for both OBFileTransfer and OBLogger to this repo


To Use
------
- Get cocoapods
  - Install cocoapod gem see website for instructions works under ruby 1.9.3 I have found problems with older ruby.

- Let cocoapods know about our Private-Cocoapods
  - That way it will look there as well as in the master repo for a podspec you require.
  $ pod repo add Private-Cocoapods git@github.com:noplanb/Private-Cocoapods.git
  
- Add OBFileTransfer to a project you are working on.
  - In the top level directory for your project add a file 'Podfile' if you dont have one.
  - Add the line
    - pod 'OBFileTransfer'
  - In the same directory 
    $ pod install
  - This should bring in all the neccessary files, dependencies frameworks etc.

To Collaborate
--------------
- Make changes in your local clone of noplanb/FileTransferPlay repo
  - Change the version in the podspec file
  - lint to make sure ok
    $ pod lib lint
	
- Push changes to the noplanb/FileTransferPlay repo and tag it with the same version as in the podspec file
  $ git add -A && git commit -m "Release 0.0.2."
  $ git tag '0.0.2'
  $ git push --tags
  
- Push the updated podspec to our Private-Cocoapods repo
  $ rvm 1.9.3
  $ pod repo push Private-Cocoapods OBFileTransfer.podspec
  
- Pod install should now pull in the newer version unless you specify and older version in the podfile.

  
  