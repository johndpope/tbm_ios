RELEASE NOTES
=============
v1.34 - 8 - 9/10/2014


BUG:  Downloads get stuck when in Cellular.
CAUSE: It turns out that ios reserves the option not to initiate your downloads in cellular if they were initiated in the background as by remote notification. The problem is that it also doesn't initiate them for you when the app moves to the foreground.
FIX: Added methods to get transferInfo (from NSTask) as well as obTask info from FileTransferManger. In AppSync handleStuckDownloads handles all anomalies for videos expected to be downloading. Including 
  - Stalled download due to initiation in background while on cellular network.
  - Loss of NSTask under ObTask due to termination while download was in progress.
  - Loss of OBTask which should never happen but which I believe I have seen once or twice.
See release details for more info.
  
BUG: Grey center box where camera preview should be. Happens occasionally.
CAUSE: Multifactorial. See release details.
FIX: 
 - Re architected the VideoRecorder and adjusted the states where we instantiate and destroy. See release details. 
 - Added an indicator for our debugging purposes to show when we are waiting for the system to give us the camera. If we get a AVCaptureSessionRuntimeException as we sometimes do and the system asks us to try again later I indicate the number of attempts in this debug indicator.
POSSIBLE KNOWN BUG: This fixe seems to have fixed almost all instances of the problem. I believe I have seen a grey screen though with no debugging indicator showing. But I cant readily reproduce.


BUG: After downloading or uploading a video the app occasionally hangs on startup.
CAUSE: With the move to the new FileTransferManager were violating the concurrency contract we have with NSManagedObjects. You may not delete, fetch, or pass managed objects from one thread to another. They must always be handled on the thread that the NSManagedObjectContext that was used to fetch them was created. 
FIX:
  - Switch to the new Apple NSManagedObject architecture where we specify a concurrency type (NSMainQueueConcurrencyType)
  - Ensure that calls in specifically events from FTM that are not running on the main thread are dispatched to the main thread.
  
ARCHITECTURE:
  - Boot should be a category on appDelegate not on homeViewController. Refactored.
  - Not calling many of our initialization methods on the optimal lifecycle events. See release details for changes.



RELEASE DETAILS
===============

==============================================================
= PROBLEM: GREY CENTER SCREEN WHERE CAMERA PREVIEW SHOULD BE =
==============================================================
 
READ: AVCam example from apple.
QUESTION: what do they do differently.
- All of their setup is done in the viewController not in the app delegate.
- On ViewDidLoad
 - On UI thread
   - alloc init the AVCaptureSession
   - [self previewView] setSession:session
   - checkDeviceAuthorizationStatus
 - On a different thread
   - add videoDeviceInput to the session
   - add audio input to the session
   - add the file output to the session
- On viewWillAppear
 - On a different thread
   - Add observers including an observer that tries start running again in case of AVCaptureSessionRuntimeErrorNotification
   - Session startRunning
- On viewDidDisappear
  - On a different thread
   - stopRunning
   - removeObservers
- 

TODO:
x AppDelegate
  x Remove any calls to video recorder
  
  
- VideoRecorder init:
  x Add a property sessionQueue
  x create a session queue and set the property
  x On ui thread
    x create the session
    x add the preview
    x create a method to check dev auth and check
  x On the session queue do the remaining.

x VideoRecorder protocol
  x remove interrupt method
  
x VideoRecorder.dispose:
  x On queue
	  x remove the observers
	  x remove the delegate
	  x stopRunning

x VideoRecorder.startPreview
  x on other thread
    x startRunning

x HomeViewController
  x viewDidLoad 
    x Init the videoRecorder
  x viewWillAppear
    x Start the preview.
  x viewDidDisappear
    x Dispose


PROBLEM: Still get grey screen though much more rarely
TRY: 
  - Add an indicator that says we are retrieving the camera and the number of attempts.
	  - It is set when we init videoRecorder 
	  - It is reset by AVCaptureSessionDidStartRunningNotification
	  - Make AVCaptureSessionRuntimeErrorNotification increment a static counter
	  - Make AVCaptureSessionDidStartRunningNotification reset the static counter
  - Push AVCaptureSessionRuntimeErrorNotification to homeViewController and reinit the videoController
  
TODO:
  x Add a VideoRecorderRuntimeErrorNotification to protocol.
  x Add method in homeviewController
  x Add the static counter
  x Change and display the indicator.
 
=========================================================
= PROBLEM - After app is terminated it hangs on startup =
=========================================================

CONJECTURE: It seems to have happened when I moved the setupVideo recorder off the UI thread. It seems to have to get stuck on     TBMUser *user = [TBMUser getUser]; in boot. Is it possible that putting boot in ViewDidAppear for the homeViewController actually makes it happen before the models are ready? 
  CONCLUSION: This is probably not the case as the ApplicationDidLaunch happens way before ViewDidAppear and I can access the models on ApplicationDidLaunch.


READING AND CONJECTURE: It turns out that you should only access the managed object from the same thread that the context was created on. I believe that when we are getting notifications and when we are getting events from FTM we are not on the same thread and therefore violating the persistent store contract.  ON MAIN THREAD!
  TEST: Breakpoint on background notification. What thread is on.
  TEST: Breakpoint on fileTransferCompleted. What thread is it on. NOT ON MAIN THREAD!
  CONCLUSION: This is definitely a problem that needs to be addressed. 

POSSIBLE SOLUTION (A) - 
  - Change NSManagedObjectContext to init with concurrencyType: NSPrivateQueueConcurrencyType
  - For all calls on the context for fetch or save
    - Use performBlockAndWait on the context.
	
TODO:
  x AppDelegate
    x managedObjectContext to use NSPrivateQueueConcurrencyType
    x saveContext to use performBlockAndWait
  x TBMFriend
  x TBMUser
  x TBMVideo
    x All fetches should be done in a performBlockAndWait
 
RESULT: Still freezes on managed object fetch sometimes.

READING AND CONJECTURE: It is illegal to pass objects fetched on the NSPrivateQueue to the mainqueu thread.

POSSIBLE SOLUTION:
  x init context with initWithConcurrencyType:NSMainQueueConcurrencyType
  - Make sure that the callbacks from FTM are put onto the main thread.
    -fileTransferCompleted
	-fileTransferRetrying


 ====================================================================
 = PROBLEM - We are not doing things on the right events on startup =
 ====================================================================

- We are not doing the right things on the right events.
  - Boot should be a category on appDelegate not homeViewController
    - QUESTION: How early can we call the models.
	  - TEST: Try accessing user at various events
	    RESULT: AppWillFinishLaunching the models are ready.
	  
  - AppDelegate
    - WillFinishLaunchingWithOptions
	  0 Version (punting on this for now since it is a category of homeViewController)
	  x setupObLogger
	  
	- DidFinishLaunchingWithOptions
  	  x Boot
	  x setupPushNotification
	
	- WillResignActive
	  - 
	
  x HomeViewController
	x ViewWillLoad
      - (Actions that only need to be done once should be done on ViewDidLoad:)
	  - NotificationDelegate

	x ViewDidLoad
	  - FriendViews
	  - VideoPlayers
	  - LongPress
	  - ShowLog gesture
	  
	x ViewWillAppear (didAppear)
  	  - VideoRecorder.init
	
	x ViewWillDisappear
	  - VideoRecorder.dispose
	  
TODO:
x Make boot a category on appDelegate

======================================================================================================================
= PROBLEM We are not saving state in the case we change state while in the background and then the app is terminated =
======================================================================================================================
QUESTION: We call saveContext in AppWillTerminate however is AppWillTerminate always called?
  TEST 1: 
    - Clear on board logging
	- Hide the app
	- Kill in the task manager
	- Check ob log to see if we got the willTerminate event.
	RESULT: YES
	
  TEST 2:
    - Clear the on board logging
	- Put the app in the background
	- Let it quit background of its own accord.
	- Check ob log to see if we got the willTerminate event. 
	RESULT: NO But this is probably not a problem as app didnt terminate it is just dormant.
	
  TEST 3:
    - Clear the on board logging.
	- Hide the app.
	- Send it a video and notice it downloads in the background by checking server or sending phone
	- Power down the phone
	- Power up the phone
	- Check is the video there
	RESULT: No problem 

CONCLUSION: This is not a problem saveContext called in DidEnterBackground and WillTerminate in appDelegate is probably good enough.
	
	
	
======================================================================
========== PROBLEM DOWNLOADS GET STUCK WHEN IN CELLULAR ==============
======================================================================
- Test setup
  - Setup iphones.
  - 

- Download doesnt start in the background when on cellular network.
  - Close app but do not remove from Task manager
  - Turn off wifi
  - Send phone a message.

QUESTION: IS it related to a exception when VideoRecorder is trying to launch in the background. 
	TRY: remove init of videoRecorder from appDelegate and homeViewController. RESULT: Not related. Still happens.
  
  
- Video sometimes appears or at least plays twice. Does not get rid of unviewed indicator after playing.

QUESTION: Is it correct to be asking for a downloadTaskWithRequest?
  RESEARCH: What did I do in my FileTransferManager? 
    RESULT: NO!
		- sani
			- Download - NSURLSessionDownloadTask
			- Upload - NSURLSessionTask
		- Farhad
		 	- Download - NSURLSessionTask
			- Upload - NSURLSessionTask
	TRY: For download make the task an NSURLSessionDownloadTask:
		RESULT: still doesnt work.
		CHECK: Is it actually a download task.
	CONCLUSION: This cant be the problem as it is just an issue with the declaration. The actual object being returned is coming from downloadTaskWithRequest.
	
TRY:     
	[request setAllowsCellularAccess:YES];
    [request setNetworkServiceType:NSURLNetworkServiceTypeBackground];
	RESULT - still no

TRY: Do not call completionHandler(UIBackgroundFetchResultNewData);
	RESULT YES!!!!
	If there are no download tasks stuck in a that weird stopped running state then it seems that this solves the problem and the downloads proceed over wifi.
	NO NOW THIS IS NOT WORKING AGAIN. Not sure what is going on. Perhaps a coincidence with an intermittent bug.

INVESTIGATE: Check [UIApplication sharedApplication].backgroundRefreshStatus, [UIApplication sharedApplication].backgroundTimeRemaining before asking for background.
	Usually shows: 160 or so seconds and UIBackgroundRefreshStatusAvailable

TRY: I had not initialized the front camera for the result that worked above. No initialize it. And see if it still works.
	RESULT: No it doesnt work anymore and when I launch the app after receiving a notification that stalls the download I get the grey middle square.
	QUESTION: Is it really related to launching the camera?
	TRY: Disable the camera in appDelegate and homeViewController again and test.
	RESULT: No the camera doesnt seem to be the problem. Now downloads that were working properly are no longer working. 

HYPOTHESIS: Now that I am not calling completionHandler(UIBackgroundFetchResultNewData)  It is breaking something.
	TRY: add a timer and call the completion 10 seconds after we are called. 
	RESULT: Probably not related. OMG Now the didReceiveRemoteNotification:fetchCompletionHandler is not being called either for wifi or for cellular in background. It does get called when connected to xcode.
	
=== COMPLETE STRANGENESS === at this point I am not even getting didReceiveRemoteNotification:fetchCompletionHandler called either for wifi or cellular background. It is now only being called when connected to xcode.

TRY: Lets get back to something that works again. 
  - Turn on wifi
  - call the completion handler immediately. RESULT - doesnt do anything.

TRY: Info.plist does not contain fetch. It should. Add it. RESULT - still no longer calling didReceiveRemoteNotification 

READ: Review all the code changes from what is in the repo
	RESULT: No changes that could be causing this. All changes are pretty much OB_INFO statements.

HYPOTHESES:
  - Due to a change in the Apple notification back end (no longer sending the phone a content available notification?). 
    TRY: Check the notification payload to make sure it still is content available. RESULT: Yes it does.
	
  - Due to a change in our server no longer sending a content available notification?
    READ: review all the changes on the server vs repo - RESULT: none that could causing this
	
=== COMPLETE STRANGENESS === This morning without making any changes the same code that was not receiving didReceiveRemoteNotification is now getting the callback in cellular and wifi.

DO: Go back to remote server for both phones I can test cellular download.


NOTICED: Again when in cellular donwnload task hangs.
TRY: put the timer back in for the completionHandler. 
RESULT: Download still hangs but noticed that phone came up with grey center window.
DO: 
  - Put app in background
  - Turn wifi on
  - Downloads complete

NOTICED: Above when download hung when I turned app on center box was grey.
DO:
  - Remove videoRecorder appDelegate and homeViewController.
  - Reload app from scratch.
  - Turn wifi off
RESULT: 
  - Now not receiving callback for notification in cellular.
STATE: 
  - VideoRecorder disabled
  - Completion handler called via 10 second timer
  - Pointing to server
DO: 
  - Uninstall app
  - Reinstall
  - Stop in xcode
  - Unplug at phone
  - Terminate the app on the task manager
  - Reboot the phone
  - Turn wifi on
  - Restart the app
  - Clear the log
  - Hide the app
  - Send a message
RESULT:
  - No notification.
DO: 
  - Connect to xcode
  - Run from xcode
  - Hide the app
  - Send message
RESULT: 
  - Notification and download complete while app is hidden.
DO:
  - Unplug from xcode without stopping
  - Send message
RESULT:
  - No download in background
DO:
  - launch app to check log on phone
RESULT:
  - Did not receive notification while in background.
DO:
  - Wait till app background time remaining expires (3 minutes)
  - Send a message
  - Launch app to look at log
RESULT:
  - Did not receive notification while in background.
CHANGE STATE A:
  - Remove all calls to requestBackground
    - AppSync
	  - fileTransferCompleted
	  - fileTransferRetrying
	- PushNotification
	  - didRecieveRemoteNotification
	- FTM
	  - Dont remove as not called except for retry.
  - Change requestBackground to call [[UIApplication sharedApplication] endBackgroundTask: self.backgroundTaskId];
    - In AppDelegate
	- In FileTransferManager
  - Change didReceiveRemoteNotification to call completion handler immediately.
DO:
  - Turn on wifi
  - Remove app
  - Reinstall
  - Put in background on xcode
  - Send message
  - NOTICE: callback and download work fine
  - End app in xcode
  - Launch app
  - Clear log
  - Hide app
  - Send message
RESULT: NOW NOTIFICATION ALERT DOESNT EVEN APPEAR! and I dont get callback.
DO:
  - Try iphone5c
  - Notification and upload work in the background on wifi.
  - Not sure about code is on iphone5c 
  - Send 15 messages while in background
  - Notice alerts and badge increment.
  - Launch app view messages
  - Hide app
  - Send 10 more
  - NOTICE - Got alerts for all but only 8 downloaded in the background
  - Launch the app 
  - NOTICE 
    - It downloaded 1 because of polling on launch
	- It then had all 10.
	- Since it was able to download 1 on polling it probably means we did not get notification callback for 1
  - Hide the app
  - Send 10 more
  - NOTICE: got all 10 in background.
  - Hide the app wait grab some coffee for 10 minutes
  - Send 10 more
  - NOTICE: got all 10 in background.
DO: 
  - Change 5c to STATE A (same as broken i4)
  - Remove app
  - Install
  - Put in background
  - Send 10 messages
  - NOTICE!!! 
    - The first few uploaded in background
	- Then I would get alerts but they wouldnt uplaod
  - Launch the app
  - Hide the app
  - NOTICE!!!
    - Now not even getting alerts like on the i4
DO: 
  - Try to get back to the working state that was on the 5c
STATE B: (Reverse changes made in STATE A)
  - Add calls to requestBackground
    - AppSync (2)
	- Notification (1)
  - Leave immediate call to completionHandler notification callback
  - Change requestBackground remove: [[UIApplication sharedApplication] endBackgroundTask: self.backgroundTaskId];
    - FTM
	- AppDelegate
DO: 
  - Uninstall 5c and reinstall.
  - Send 10 messages
NOTICE:
  - Got all 10 in background.
DO: 
  - Install STATE B: on i4
  - Send 10 messages
NOTICE:
  - All received in background.
CONCLUSION: 
  - Calling requestBackground seems to have an important effect.
TEST:
  - in 5c
  - Remove calls to requestBackground 
	- Notification only
	- Leave in appSync
  - Reinstall
  - Notice: First notification gets through and does upload
  - Notice: After that notification but no uploads
  - Launch the app
  - Downloads a bunch probably because was not receiving notification callback previously
  - Hide the app
  - Send 10 more
  - Notfication alerts but no uploads.
CONCLUSION:
  - Calling requestBackground in notification callback is important.
DO:
  - STATE B on i4
  - Send 10 messages with wifi
  - Notice: Got all 10 in background
  - Turn wifi off
  - Send 10 more
  - Notice: got alerts but no download
  - Turn wifi on
  - Notice: The 10 that were stuck come in in the background.
CHANGE STATE C:
	- Same as B but comment out [[UIApplication sharedApplication] endBackgroundTask: self.backgroundTaskIdentifier]; in FTM.updateBackground.
DO:
  - Wifi on send 10
  - Notice: all arrive in background
  - Wifi off send 10
  - Notice: alerts but none arrive in background
  - Wifi on
  - Notice: 10 that were hung come in.
CHANGE STATE D:
  - Same as C but comment out     completionHandler(UIBackgroundFetchResultNewData); in didReceiveRemoteNotification.
DO:
  - Reinstall
  - Wifi on send 10
  - Notice: 
  	- Got notification alert for 10 but only a few downloaded in the background.
	- Badge counter went got up to 3 but went back to 1.
  - Launch app
  - Notice
    - Polling downloaded 5 which means that did not receive notification callbacks for 5 
CONCLUSION:
  - Calling the completionHandler for didReceiveNotification is important or it seems the callback will not be called consistently afterwards.
CHANGE STATE E:
  - Same as C but call the completionHandler for Notification callback after a delay of 4 seconds
DO:
  - Reinstall
  - Wifi on 
  - Send 5 but wait a 7 second between each.
  - Notice: got all 5
  - Wifi off
  - Notice: all got stuck
  - Wifi on 
  - Notice: all come through
CONCLUSION:
  - Waiting 4 seconds before calling completion handler has no effect on stuck download tasks.

DIFFERENT APPROACH: Try to get the stuck downloads unstuck or not stuck in the first place.
CHANGE STATE (F):
  - Same as C except
  - Create a method on file transfer manager that calls session.flushWithCompletionHandler
  - Call this method from appSync before sending each download request to ftm in queueForDownload
DO:
  - Reinstall
  - Send messages with app on xcode in foreground - seems to work ok and flush seems to work.
  - Send with app on xcode in background - seems to work ok
  - Stop in xcode
  - Send messages with wifi on - works
  - Send with wifi off - SAME AS BEFORE - Downloads get stuck.
CHANGE STATE (G):
  - Same as F except
  - in FTM set configuration.allowsCellularAccess = YES


===========================================================================================================
========================== SOLUTION to Downloads get stuck while in Cellular ==============================
===========================================================================================================
The OS it appears has discretion on whether and when to execute your background downloads if they are started in the background. 

Here is my SO answer for someone who has the exact same problem.

http://stackoverflow.com/a/25653066/2450323

This also explains why it was working intermittently. 

It seems it is the policy of the OS in general to not start downloading content that that was initiated in the background by a notification if in cellular. This kind of makes sense if you think about it. A rogue app could start downloading gigs of content over cellular to your phone in the background without your request or knowledge.

The unfortunate thing is that it doesnt restart these hung downloads when the app comes into the foreground. After stalling them it seems only to look at whether wifi has come back on to let them proceed.

So this is what I am thinking:

- On notification
  - Start the download as we do now
  - Make the badge count indicate videos that are pending download as well as unviewed so the user sees that there is something at least waiting to download.

- On becoming active
  - The FTM 
     - Needs a way to detect which tasks are stuck. (Unfortunately they all seem to be in running vs suspended state.) 
     - Needs a way to Cancel them and reissue them. 


This seems to imply that if a download is started in the background the OS always has discretion as to whether and when to proceed with the download. It seems that the OS is always waiting for a wifi connection before completing these tasks.

My experience supports this conjecture. I find that I can send several notifications for downloads while device is on cellular. They remain stuck. When I switch the device to wifi they all go through.
  

QUESTION: 
 - How best to handle the stuck downloads when the app becomes active?
TRY:
 - resume them?
 READ: about task.resume - resumes a task if suspended.


SOLUTION: Add methods in FTM to help with restarting transfers.

ARCHITECTURE
------------
 x When the app didBecomeActive
   x AppSync.handleStuckDownloads
	   x For each video in download state
	     x If FT created more than 5 seconds ago and bytes transferred = 0 restart the download

 
QUESTION: How to set the badge number?
GOAL: In the case where downloads are stuck we want show that videos are waiting on the badge so user opens the app causing the downloads to restart.
  x Each time we queue a video for download either in background or foreground set the badge to be total downloading plus total downloaded.
  x When applications enters background set the badge to just the total downloaded.


TODO: 
  x Update pods.
  x Add handleStuckDownloads method to app sync
  x Add call 
  x Add methods to update the badge number properly.
  - Merge changes back into FTM


PROBLEM: There are cases for example when user terminates the app with ongoing downloads where the nsTasks under the obTasks disappear but the obTask believes they are still processing.

SOLUTION: In handleStuckDownloads detect these and restart the tasks.
  Get info and transferInfo for video
  CASES:
    obInfo                      transferInfo
	------                      ------------
	nil		                    x                    queue download again
	status_retry                x                    do nothing
	!status_retry               nil                  restartDownload
	!nil                        bytes==0             restartDownload
	

TEST NEW ARCHITECTURE
---------------------
  x receive multiple videos in foreground.
  x receive multiple videos with wifi on
  x receive a long video with wifi on kill app while downloading
  x receive multiple long videos with wifi off
  x receive multiple long videos with wifi off kill app while downloading
  x receive multiple videos with app terminated
  x Point to local server
	  x receive multiple videos with wifi on and server broken
	  x receive multiple videos with  wifi on and server broken kill app while retrying
  
  


